#!/usr/bin/env python

from __future__ import print_function
from shlex import split
import subprocess
import argparse
import os

KUBEVER = 'v1.14.0'

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(title="commands", dest="c1")
init = subparsers.add_parser('init', help='initialize slatelite containers')
init.add_argument('-p', '--port', '--publish', dest='ports', action='append', nargs='?',
                  metavar='hostPort or hostPort:containerPort', help='Example: `./slatelite init -p 3000`')
init.add_argument('-v', '--volume', dest='volumes', action='append', nargs='?',
                  metavar='hostDir or hostDir:containerDir', help='Example: `./slatelite init -v ~/workdir`')
init.add_argument('-s', '--server', '--api', dest='apiserver', action='store', nargs=1, metavar='The API server to connect to. Either dev or prod.',
                  help='Example: `./slatelite init -s dev` or `./slatelite init -s prod`')
init.add_argument('-t', '--token', dest='token', action='store', nargs=1, metavar='Your slate access token, must match the API server -s',
                  help='Slate access token retrieved from portal.slateci.io, Example: `./slatelite init -s dev -t C7qMTwfb4-c1yPNwCxn43fk`')
init.add_argument('-c', '--cluster', '--clustername', dest='clustername', action='store', nargs=1, metavar='The name of your slatelite cluster',
                  help='The name you want for your slatelite cluster ')
init.add_argument('-g', '--group', '--slategroup', dest='group', action='store', nargs=1, metavar='The SLATE group to register the cluster under',
                  help='The SLATE group name to register your cluster with')
subparsers.add_parser('pause', help='pause slatelite containers')
subparsers.add_parser('unpause', help='unpause slatelite containers')
destroy = subparsers.add_parser('destroy', help='completely destroy environment')
destroy.add_argument('--rmi', dest='rmi', action='store_true', help='Example: `./slatelite destroy --rmi`')
destroy.add_argument('-y', dest='confirm', action='store_true', help='Example: `./slatelite destroy -y`')
subparsers.add_parser('status', help='view status of slatelite containers')
build = subparsers.add_parser('build', help='build/rebuild container images')
build.add_argument('c2', metavar='container', nargs='?', choices=[
                   'kube', 'slate', 'db', 'nfs'], help='Example: `./slatelite build slate`')
shell = subparsers.add_parser(
    'shell', help='open a shell in a slatelite container')
shell.add_argument('c2', metavar='container', choices=[
                   'kube', 'slate', 'db', 'nfs'], help='Example: `./slatelite shell slate`')
slate = subparsers.add_parser('slate', help='run a slate command')
slate.add_argument('c2', metavar='command', nargs=argparse.REMAINDER,
                   help='Example: `./slatelite slate group list`')
kubectl = subparsers.add_parser('kubectl', help='run a kubectl command')
kubectl.add_argument('c2', metavar='command', nargs=argparse.REMAINDER,
                     help='Example: `./slatelite kubectl get po --all-namespaces`')
exec_ = subparsers.add_parser('exec', help='wrapper of "docker-compose exec"')
exec_.add_argument('c2', metavar='command', nargs=argparse.REMAINDER,
                   help='Example: `./slatelite exec kube ip addr`')
args = parser.parse_args()

try:
  from subprocess import DEVNULL  # py3k
except ImportError:
    DEVNULL = open(os.devnull, 'wb')


def initcheck(initerr='SLATElite is not initialized. Run: `./slatelite init`'):
    if not os.path.isfile('docker-compose.yml'):
        raise EnvironmentError(initerr)


def readycheck(rdyerr='SLATElite has non-ready containers. Is the environment paused?'):
  try:
    subprocess.check_call(split(
        '/bin/sh -c "docker-compose ps | grep Up"'), stdout=DEVNULL, close_fds=True)
  except subprocess.CalledProcessError:
    raise EnvironmentError(rdyerr)


def run(cmd):
  return subprocess.call(split(cmd))


if args.c1 == 'init':
    if os.path.isfile('docker-compose.yml'):
        raise EnvironmentError(
            'SLATElite is already initialized. Run `./slatelite destroy && ./slatelite init` to reset your environment.')
    ports = []
    volumes = []
    if args.ports:
        for item in args.ports:
            ports.append('      - ' + item)
    if args.volumes:
        for item in args.volumes:
            if ':' not in item:
              item = item + ':/mnt/' + os.path.basename(item)
            volumes.append('      - ' + item)
    if args.apiserver:
        if args.apiserver[0] == 'dev':
          apiendpoint = 'https://api-dev.slateci.io:18080'
        elif args.apiserver[0] == 'prod':
          apiendpoint = 'https://api.slateci.io:18080'
        else:
          apiendpoint = args.apiserver[0]
    ports = '\n'.join(ports)
    volumes = '\n'.join(volumes)
    if args.token:
      token = args.token[0]
    if args.group:
      clustergroup = args.group[0]
    if args.clustername:
      clustername = args.clustername[0]
    with open('docker-compose.yml.tmpl', 'r') as file:
        contents = file.read()
    contents = contents.replace('# {PORTS}', ports)
    contents = contents.replace('# {VOLUMES}', volumes)
    if args.token:
      contents = contents.replace('# {TOKEN}', token)
    if args.apiserver:
      contents = contents.replace('# {ENDPOINT}', apiendpoint)
    if args.clustername:
      contents = contents.replace('# {CLUSTERNAME}', clustername)
    if args.group:
      contents = contents.replace('# {CLUSTERGROUP}', clustergroup)
    with open('docker-compose.yml', 'w') as file:
        file.write(contents)
        file.flush()
        os.fsync(file)
    try:
      run('docker-compose -v')
    except:
      raise EnvironmentError('Could not run docker-compose. Is it installed?')
    if(run('docker-compose up -d') == 0):
      if(run('docker-compose exec slate ./init.sh') == 0):
        print('\033[1m'+"DONE! SLATElite is now initialized."+'\033[0m')
elif args.c1 == 'pause':
  initcheck()
  readycheck(rdyerr='It appears SLATElite is already paused.')
  run('docker-compose pause')
elif args.c1 == 'unpause':
  initcheck()
  try:
    subprocess.check_call(split(
        '/bin/sh -c "docker-compose ps | grep Paused"'), stdout=DEVNULL, close_fds=True)
  except subprocess.CalledProcessError:
    raise EnvironmentError('SLATElite is not paused.')
  run('docker-compose unpause')
elif args.c1 == 'destroy':
    initcheck()
    try:
        input = raw_input
    except NameError:
        pass
    yes = {'yes','y','ye'}
    choice = ''
    if not args.confirm:
        print("Are you sure you'd like to completely destroy your SLATElite environment? (y/N) ", end='')
        choice = input().lower()
    if choice in yes or args.confirm:
        run('docker-compose kill -s SIGKILL kube')
        if args.rmi:
            run('docker-compose down -v --rmi local')
        else:
            run('docker-compose down -v')
        try:
            os.remove('docker-compose.yml')
        except OSError:
            pass
elif args.c1 == 'build':
  args.c2 = args.c2 or ''
  run('docker-compose -f docker-compose.yml.tmpl build --no-cache ' + args.c2)
elif args.c1 == 'shell':
  initcheck()
  readycheck()
  run('docker-compose exec ' + args.c2 + ' /bin/bash')
elif args.c1 == 'status':
  initcheck()
  run('docker-compose ps')
elif args.c1 == 'slate':
  initcheck()
  readycheck()
  c2 = ' '.join(args.c2)
  run('docker-compose exec slate slate ' + c2)
elif args.c1 == 'kubectl':
  initcheck()
  readycheck()
  c2 = ' '.join(args.c2)
  run('docker-compose exec slate kubectl ' + c2)
elif args.c1 == 'exec':
  initcheck()
  readycheck()
  c2 = ' '.join(args.c2)
  run('docker-compose exec ' + c2)
else:
  args.c1 = args.c1 or ''
  raise ValueError('Invalid argument: ' + args.c1)
